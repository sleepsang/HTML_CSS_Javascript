{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red217\green11\blue0;\red59\green0\blue164;\red174\green0\blue240;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh16520\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf2 jQuery\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 _______\
\'93the net ninja\'94 youtube tutorials\
- planning to add basic interactivity using jQuery instead of p5\
where we at: video #5, selectors \
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf3 _jQuery statements, the $ sign and the jQuery wrapper_\cf0 \
\
statements start with the $ sign. the following two do the same thing: \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\i \cf0 vanilla JS:
\i0 \
document.getElementById(\'93main-heading\'94);				
\i \cf4 // use javascript to select a DOM element by it\'92s ID
\i0 \cf0 \
\

\i jQuery:
\i0 \
$(\'93#main-heading\'94);									
\i \cf4 // much shorter with jQuery, note CSS style ID selector\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\i0 \cf0 \
\'85there is one slight difference between these two methods. the pure JS method returns the element as is, but the jQuery method returns the element within what is termed the jQuery wrapper. In the console this looks like so: \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\i \cf0 vanilla JS:
\i0 \
<h2 id=\'93page-title\'94>welcome to my page</h2>				
\i \cf4 // 
\i0 \cf0 \
\

\i jQuery:
\i0 \
[	<h2 id=\'93page-title\'94>welcome to my page</h2>		]       
\i \cf4 // special array style jQuery wrapper\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\i0 \cf0 so long as the object is inside this wrapper, it has access to the vast number of jQuery methods. these provide event listeners, css stuff, animation, and a whole lot more. we can still access the element as html too so we can use vanilla js properties and methods. \
we can store our jQuery wrapper in a variable, in order for us to change aspects of it, like so: \
\
var heading = $(\'93#page-title\'94);							
\i \cf4 //  \'93wrap\'94 the element / object in jQuery so we can start using it\'92s methods
\i0 \cf0 \
heading.css(\{position: \'93relative\'94\});						
\i \cf4 //  mess about with some css 
\i0 \cf0 \
\
heading[0];										
\i \cf4 // use array notation to return the object outside of it\'92s wrapper. this has now set the variable to be normal again, meaning we can\'92t use jQuery methods on it until it is wrapped again. 
\i0 \cf0 \
\
\
 }